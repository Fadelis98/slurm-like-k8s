#!/bin/bash

# Check if kubectl is available
if ! command -v kubectl &> /dev/null; then
    echo "kubectl is not installed or configured. Please install and configure kubectl first."
    exit 1
fi

# Parse optional --clean argument
CLEAN=false
if [[ "$1" == "--clean" ]]; then
    CLEAN=true
fi

# Get all Jobs across all namespaces
jobs=$(kubectl get jobs --all-namespaces -o json)

# Check if there are any Jobs
if [[ $(echo "$jobs" | jq '.items | length') -eq 0 ]]; then
    echo "No Jobs found."
    exit 0
fi

# Print the table header, similar to squeue format
printf "%-10s %-10s %-10s %-10s %-10s %-10s\n" "JOBID" "STATE" "PODS" "CPUS" "MEMORY" "GPUS"

# Arrays to store completed and failed jobs for cleanup
completed_jobs=()
failed_jobs=()

# Iterate through each Job
echo "$jobs" | jq -c '.items[]' | while IFS= read -r job; do
    namespace=$(echo "$job" | jq -r '.metadata.namespace')
    name=$(echo "$job" | jq -r '.metadata.name')

    # Check the status of the Job
    completion_time=$(echo "$job" | jq -r '.status.completionTime // empty')
    failed=$(echo "$job" | jq -r '.status.failed // 0')

    # Determine the task state
    if [[ -n "$completion_time" ]]; then
        state="Completed"
        completed_jobs+=("$namespace/$name")
    elif [[ "$failed" -gt 0 ]]; then
        state="Failed"
        failed_jobs+=("$namespace/$name")
    else
        # Get Pod names and count
        pods=$(kubectl get pods -n "$namespace" --selector=job-name="$name" -o json)
        pod_count=$(echo "$pods" | jq '.items | length')

        # Get resource requests from the first Pod (assuming all Pods have the same resource requests)
        cpu_request=$(echo "$pods" | jq -r '.items[0].spec.containers[0].resources.requests.cpu // "N/A"')
        memory_request=$(echo "$pods" | jq -r '.items[0].spec.containers[0].resources.requests.memory // "N/A"')
        gpu_request=$(echo "$pods" | jq -r '.items[0].spec.containers[0].resources.requests."nvidia.com/gpu" // "0"')

        # Determine the task state
        if [[ "$pod_count" -eq 0 ]]; then
            state="Pending"
        else
            state="Running"
        fi
    fi

    # Display all jobs (including Completed and Failed)
    if [[ "$state" == "Completed" || "$state" == "Failed" ]]; then
        printf "%-10s %-10s %-10s %-10s %-10s %-10s\n" "$name" "$state" "N/A" "N/A" "N/A" "N/A"
    else
        printf "%-10s %-10s %-10s %-10s %-10s %-10s\n" "$name" "$state" "$pod_count" "$cpu_request" "$memory_request" "$gpu_request"
    fi
done

# Cleanup completed and failed jobs if --clean is specified
if [[ "$CLEAN" == true ]]; then
    echo "Cleaning up completed and failed Jobs..."

    # Delete completed jobs
    for job in "${completed_jobs[@]}"; do
        namespace=$(echo "$job" | cut -d'/' -f1)
        name=$(echo "$job" | cut -d'/' -f2)
        echo "Deleting completed Job: $name in namespace $namespace"
        kubectl delete job "$name" -n "$namespace" --ignore-not-found
    done

    # Delete failed jobs
    for job in "${failed_jobs[@]}"; do
        namespace=$(echo "$job" | cut -d'/' -f1)
        name=$(echo "$job" | cut -d'/' -f2)
        echo "Deleting failed Job: $name in namespace $namespace"
        kubectl delete job "$name" -n "$namespace" --ignore-not-found
    done
fi