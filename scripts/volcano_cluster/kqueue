#!/bin/bash

# Check if kubectl is available
if ! command -v kubectl &> /dev/null; then
    echo "kubectl is not installed or configured. Please install and configure kubectl first."
    exit 1
fi

# Parse optional --clean argument
CLEAN=false
if [[ "$1" == "--clean" ]]; then
    CLEAN=true
fi

# Get all Volcano Jobs across all namespaces
jobs=$(kubectl get vcjob --all-namespaces -o json)

# Check if there are any Volcano Jobs
if [[ $(echo "$jobs" | jq '.items | length') -eq 0 ]]; then
    echo "No Volcano Jobs found."
    exit 0
fi

# Print the table header, similar to squeue format
printf "%-10s %-10s %-10s %-10s %-10s %-10s\n" "JOBID" "STATE" "PODS" "CPUS" "MEMORY" "GPUS"

# Arrays to store completed and failed jobs for cleanup
completed_jobs=()
failed_jobs=()

# Write JSON data to a temporary file
temp_file=$(mktemp)
echo "$jobs" > "$temp_file"

# Iterate through each Volcano Job from the temporary file
while IFS= read -r job; do
    namespace=$(echo "$job" | jq -r '.metadata.namespace')
    name=$(echo "$job" | jq -r '.metadata.name')

    # Check the status of the Volcano Job
    state=$(echo "$job" | jq -r '.status.state.phase // "Unknown"')

    # If the Job is completed or failed, add it to the respective array for cleanup
    if [[ "$state" == "Completed" ]]; then
        completed_jobs+=("$namespace/$name")
    elif [[ "$state" == "Failed" ]]; then
        failed_jobs+=("$namespace/$name")
    fi

    # Get resource requests from the Pods managed by this Volcano Job
    pods=$(kubectl get pods -n "$namespace" --selector=volcano.sh/job-name="$name" -o json)
    pod_count=$(echo "$pods" | jq '.items | length')
    cpu_request="N/A"
    memory_request="N/A"
    gpu_request="0"

    if [[ $pod_count -gt 0 ]]; then
        cpu_request=$(echo "$pods" | jq -r '.items[0].spec.containers[0].resources.requests.cpu // "N/A"')
        memory_request=$(echo "$pods" | jq -r '.items[0].spec.containers[0].resources.requests.memory // "N/A"')
        gpu_request=$(echo "$pods" | jq -r '.items[0].spec.containers[0].resources.requests."nvidia.com/gpu" // "0"')
    fi

    # Display all jobs (including Completed and Failed)
    printf "%-10s %-10s %-10s %-10s %-10s %-10s\n" "$name" "$state" "$pod_count" "$cpu_request" "$memory_request" "$gpu_request"

done < <(jq -c '.items[]' "$temp_file")

# Cleanup completed and failed jobs if --clean is specified
if [[ "$CLEAN" == true ]]; then
    echo "Cleaning up completed and failed Volcano Jobs..."

    # Delete completed jobs
    for job in "${completed_jobs[@]}"; do
        namespace=$(echo "$job" | cut -d'/' -f1)
        name=$(echo "$job" | cut -d'/' -f2)
        echo "Deleting completed Volcano Job: $name in namespace $namespace"
        kubectl delete vcjob "$name" -n "$namespace"
    done

    # Delete failed jobs
    for job in "${failed_jobs[@]}"; do
        namespace=$(echo "$job" | cut -d'/' -f1)
        name=$(echo "$job" | cut -d'/' -f2)
        echo "Deleting failed Volcano Job: $name in namespace $namespace"
        kubectl delete vcjob "$name" -n "$namespace"
    done
fi

# Clean up the temporary file
rm -f "$temp_file"